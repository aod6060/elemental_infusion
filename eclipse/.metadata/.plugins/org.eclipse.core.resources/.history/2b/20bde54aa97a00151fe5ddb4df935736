package com.derf.ei.multiblock;

import java.util.ArrayList;

import com.derf.ei.block.EIBlocks;

import net.minecraft.block.Block;
import net.minecraft.world.World;

public class EIMultiBlockCobbleGenerator extends EIMultiBlock {

	private boolean testBlocks = false;
	
	@Override
	public void update(World world, int x, int y, int z) {
		// TODO Auto-generated method stub
		super.update(world, x, y, z);
		
		if(isMultiBlockComplete(world, x, y, z)) {
			
		}
	}
	
	private ArrayList<Block> createBlockList(World world, int x, int y, int z) {
		
		ArrayList<Block> temp = new ArrayList<Block>();
		// First Section
		
		temp.add(world.getBlock(x-1, y, z)); // Fire Iron Block
		temp.add(world.getBlock(x+1, y, z)); // Water Iron Block
		temp.add(world.getBlock(x-1, y, z-1));
		temp.add(world.getBlock(x-1, y, z+1));
		temp.add(world.getBlock(x-2, y, z));
		temp.add(world.getBlock(x-2, y, z-1));
		temp.add(world.getBlock(x-2, y, z+1));
		temp.add(world.getBlock(x+1, y, z-1));
		temp.add(world.getBlock(x+1, y, z+1));
		temp.add(world.getBlock(x+2, y, z));
		temp.add(world.getBlock(x+2, y, z-1));
		temp.add(world.getBlock(x+2, y, z+1));
		temp.add(world.getBlock(x, y, z-1));
		temp.add(world.getBlock(x, y, z+1));
		
		return temp;
	}
	
	private void printBlocks(ArrayList<Block> temp) {
		if(!testBlocks) {
			for(int i = 0; i < temp.size(); i++) {
				System.out.println("Unlocalizaed Name: " + temp.get(i).getUnlocalizedName());
			}
			
			testBlocks = true;
		}
	}
	
	private boolean checkForVoidStone(ArrayList<Block> temp) {
		boolean b = true;
		
		for(int i = 2; i < temp.size(); i++) {
			if(!EIBlocks.isVoidStone(temp.get(i))){
				
				if(!EIBlocks.isVoidStoneItemOutput(temp.get(i))) {
					b = false;
					break;
				}
			}
		}
		
		return b;
	}
	
	private boolean checkForVoidStoneOutput(ArrayList<Block> temp) {
		boolean b = false;
		
		for(int i = 2; i < temp.size(); i++) {
				
			if(EIBlocks.isVoidStoneItemOutput(temp.get(i))) {
				b = true;
				break;
			}
		}
		
		return b;
	}
	
	private boolean checkIfOneVoidStoneOutput(ArrayList<Block> temp) {
		int num = 0;
		
		
		for(int i = 2; i < temp.size(); i++) {
			if(EIBlocks.isVoidStoneItemOutput(temp.get(i))) {
				num += 1;
			}
		}
		
		return num == 1;
	}
	
	private boolean isMultiBlockComplete(World world, int x, int y, int z) {
		ArrayList<Block> blockList = this.createBlockList(world, x, y, z);
		boolean b = true;
		
		printBlocks(blockList);
		
		if(!EIBlocks.isFireIronBlock(blockList.get(0))) {
			b = false;
		}
		
		if(!EIBlocks.isWaterIronBlock(blockList.get(1))) {
			b = false;
		}
		
		if(b) {
			b = checkForVoidStone(blockList);
		}
		
		if(b) {
			b = checkForVoidStoneOutput(blockList);
		}
		
		if(b) {
			b = checkIfOneVoidStoneOutput(blockList);
		}
		
		return b;
	}
}
