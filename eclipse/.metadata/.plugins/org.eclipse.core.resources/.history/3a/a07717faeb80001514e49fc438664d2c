package com.derf.ei.handlers;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import net.minecraft.block.Block;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.MovingObjectPosition;
import net.minecraft.util.MovingObjectPosition.MovingObjectType;
import net.minecraft.world.World;
import net.minecraftforge.common.util.ForgeDirection;
import net.minecraftforge.event.entity.player.FillBucketEvent;
import net.minecraftforge.fluids.FluidContainerRegistry;
import net.minecraftforge.fluids.FluidStack;
import net.minecraftforge.fluids.FluidTankInfo;
import net.minecraftforge.fluids.IFluidHandler;

import com.google.common.collect.Sets;

import cpw.mods.fml.common.eventhandler.Event.Result;
import cpw.mods.fml.common.eventhandler.SubscribeEvent;

/**
 * Reference some stuff from OpenModLib
 * https://github.com/OpenMods/OpenModsLib/blob/master/src/main/java/openmods/liquids/BucketFillHandler.java
 * 
 * 
 * @author Fred
 *
 */
public class EIBucketHandler {
	public static EIBucketHandler INSTANCE = new EIBucketHandler();
	
	public Map<Block, Item> buckets = new HashMap<Block, Item>();
	
	public final Set<Class<? extends IFluidHandler>> tanks = Sets.newHashSet();
	
	private EIBucketHandler() {}
	
	public void registerBucket(Block k, Item i) {
		buckets.put(k, i);
	}
	
	public void registerTank(Class<? extends TileEntity> cls) {
		tanks.add((Class<? extends IFluidHandler>)cls);
	}
	
	@SubscribeEvent
	public void onBucketFill(FillBucketEvent event) {
		if(!event.world.isRemote) {
			/*
			ItemStack result = fillCustomBucket(event.world, event.target);
			
			System.out.println("Hello, World");
			
			if(result == null)
				return;
			
			event.result = result;
			event.setResult(Result.ALLOW);
			*/
			
			if(event.getResult() != Result.DEFAULT) return;
			
			final MovingObjectPosition target = event.target;
			
			if(target.typeOfHit != MovingObjectType.BLOCK) return;
			
			TileEntity te = event.world.getTileEntity(target.blockX, target.blockY, target.blockZ);
			
			if(this.shouldFile(te)) {
				ItemStack result = fillCustomTank((IFluidHandler)te, ForgeDirection.getOrientation(target.sideHit), event.current);
				
				
			} else {
				ItemStack result = fillCustomBucket(event.world, event.target);
				
				System.out.println("Hello, World");
				
				if(result == null)
					return;
				
				event.result = result;
				event.setResult(Result.ALLOW);
			}
		}
	}
	
	private ItemStack fillCustomBucket(World world, MovingObjectPosition pos) {
		Block block = world.getBlock(pos.blockX, pos.blockY, pos.blockZ);
		
		Item bucket = buckets.get(block);
		
		if(bucket != null && world.getBlockMetadata(pos.blockX, pos.blockY, pos.blockZ) == 0) {
			world.setBlockToAir(pos.blockX, pos.blockY, pos.blockZ);
			return new ItemStack(bucket);
		} else {
			return null;
		}
		
	}
	
	/*
	 * OpenModLib
	 * https://github.com/OpenMods/OpenModsLib/blob/master/src/main/java/openmods/liquids/BucketFillHandler.java
	 */
	private ItemStack fillCustomTank(IFluidHandler handler, ForgeDirection dir, ItemStack container) {
		
		FluidTankInfo tis[] = handler.getTankInfo(dir);
		
		for(FluidTankInfo ti : tis) {
			FluidStack available = ti.fluid;
			
			if(available == null || available.amount <= 0) {
				continue;
			}
			
			ItemStack filledStack = FluidContainerRegistry.fillFluidContainer(available, container);
			FluidStack filled = FluidContainerRegistry.getFluidForFilledItem(filledStack);
			
			if(filled != null && filled.isFluidEqual(available) && filled.amount <= available.amount) {
				FluidStack drained = handler.drain(dir, filled.amount, false);
				
				if(drained.isFluidEqual(filled)) {
					handler.drain(dir, filled.amount, true);
					return filledStack;
				}
			}
			
		}
		
		return null;
	}
	
	/*
	 * OpenModLib, and some what alter by me
	 * https://github.com/OpenMods/OpenModsLib/blob/master/src/main/java/openmods/liquids/BucketFillHandler.java
	 */
	private boolean shouldFile(Object target) {
		return (target != null) && (target instanceof IFluidHandler) && tanks.contains(target.getClass());
	}
}
