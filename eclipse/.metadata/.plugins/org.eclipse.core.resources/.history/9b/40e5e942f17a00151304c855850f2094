package com.derf.ei.multiblock.furnace;

import java.util.ArrayList;

import net.minecraft.block.Block;
import net.minecraft.init.Blocks;
import net.minecraft.world.World;

import com.derf.ei.block.EIBlocks;
import com.derf.ei.util.EIPosition;

public class EIMultiBlockFurnaceVoidStone extends EIMultiBlockFurnace {

	private boolean testPositions = false;
	private boolean testBlocks = false;
	
	@Override
	public void update(World world, int x, int y, int z) {
		// TODO Auto-generated method stub
		super.update(world, x, y, z);
		
		if(isMultiBlockComplete(world, x, y, z)) {
			//this.updateInventory(world);
			System.out.println("Void Furnace is Complete");
		}
	}

	private ArrayList<EIPosition> createPositionList(int x, int y, int z) {
		ArrayList<EIPosition> temp = new ArrayList<EIPosition>();
		
		temp.add(new EIPosition(x, y+2, z)); // Fire Dust Block
		temp.add(new EIPosition(x, y+1, z)); // Air Block (No Block in middle)
		// First Level
		temp.add(new EIPosition(x-1, y, z));
		temp.add(new EIPosition(x+1, y, z));
		temp.add(new EIPosition(x, y, z-1));
		temp.add(new EIPosition(x, y, z+1));
		temp.add(new EIPosition(x-1, y, z-1));
		temp.add(new EIPosition(x+1, y, z-1));
		temp.add(new EIPosition(x+1, y, z+1));
		temp.add(new EIPosition(x-1, y, z+1));
		// Second Level
		temp.add(new EIPosition(x-1, y+1, z));
		temp.add(new EIPosition(x+1, y+1, z));
		temp.add(new EIPosition(x, y+1, z-1));
		temp.add(new EIPosition(x, y+1, z+1));
		temp.add(new EIPosition(x-1, y+1, z-1));
		temp.add(new EIPosition(x+1, y+1, z-1));
		temp.add(new EIPosition(x+1, y+1, z+1));
		temp.add(new EIPosition(x-1, y+1, z+1));
		// Third Level
		temp.add(new EIPosition(x-1, y+2, z));
		temp.add(new EIPosition(x+1, y+2, z));
		temp.add(new EIPosition(x, y+2, z-1));
		temp.add(new EIPosition(x, y+2, z+1));
		temp.add(new EIPosition(x-1, y+2, z-1));
		temp.add(new EIPosition(x+1, y+2, z-1));
		temp.add(new EIPosition(x+1, y+2, z+1));
		temp.add(new EIPosition(x-1, y+2, z+1));
		
		return temp;
	}
	
	private ArrayList<Block> createBlockList(World world, ArrayList<EIPosition> position) {
		
		ArrayList<Block> temp = new ArrayList<Block>();
		
		for(int i = 0; i < position.size(); i++) {
			temp.add(world.getBlock(position.get(i).getX(), position.get(i).getY(), position.get(i).getZ()));
		}
		
		return temp;
	}
	
	private void printBlocks(ArrayList<Block> temp) {
		if(!testBlocks) {
			System.out.println("Blocks");
			for(int i = 0; i < temp.size(); i++) {
				System.out.println("Unlocalizaed Name: " + temp.get(i).getUnlocalizedName());
			}
			
			testBlocks = true;
		}
	}
	
	private void printPositions(ArrayList<EIPosition> temp) {
		if(!testPositions) {
			System.out.println("Positions");
			for(int i = 0; i < temp.size(); i++) {
				System.out.println("Position [ "+temp.get(i).getX()+", "+temp.get(i).getY()+", "+temp.get(i).getZ()+"]");
			}
			
			testPositions = true;
		}
	}
		
	private boolean checkForBasicBlocks(ArrayList<Block> blockList) {
		// TODO Auto-generated method stub
		boolean b = true;
		
		for(int i = 2; i < blockList.size(); i++) {
			if(!EIBlocks.isVoidStone(blockList.get(i))) {
			   if(!EIBlocks.isVoidStoneItemInput(blockList.get(i))) {
				   if(!EIBlocks.isVoidStoneItemOutput(blockList.get(i))) {
					   b = false;
					   break;
				   }
			   }
			}
		}
		
		return b;
	}
	
	private boolean isMultiBlockComplete(World world, int x, int y, int z) {
		// TODO Auto-generated method stub
		boolean b = true;
		ArrayList<EIPosition> posList = this.createPositionList(x, y, z);
		ArrayList<Block> blockList = this.createBlockList(world, posList);
		
		this.printPositions(posList);
		this.printBlocks(blockList);
		
		if(!EIBlocks.isFireBlock(blockList.get(0))) {
			b = false;
		}
		
		if(!EIBlocks.isBlock(Blocks.air, blockList.get(1))) {
			b = false;
		}
		
		if(b) {
			b = checkForBasicBlocks(blockList);
		}
		
		return b;
	}


}
