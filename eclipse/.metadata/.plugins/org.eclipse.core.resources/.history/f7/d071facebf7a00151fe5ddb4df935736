package com.derf.ei.multiblock;

import java.util.ArrayList;

import net.minecraft.block.Block;
import net.minecraft.block.BlockContainer;
import net.minecraft.init.Blocks;
import net.minecraft.inventory.IInventory;
import net.minecraft.item.ItemStack;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.world.World;

import com.derf.ei.block.EIBlocks;
import com.derf.ei.util.EIPosition;

public abstract class EIMultiBlockGenerator {
	
	private boolean testBlocks = false;
	
	private boolean findOutput = false;
	
	private Block voidStoneOutput = null;
	private EIPosition voidStoneOutputPos = null;
	
	private void updateInventory(World world, Block block) {
		// TODO Auto-generated method stub
		int x = this.voidStoneOutputPos.getX();
		int y = this.voidStoneOutputPos.getY();
		int z = this.voidStoneOutputPos.getZ();
		
		
		// Check 6 faces
		Block top = world.getBlock(x, y+1, z);
		
		if(top instanceof BlockContainer) {
			TileEntity entity = world.getTileEntity(x, y+1, z);
			
			if(entity instanceof IInventory) {
				IInventory inv = (IInventory)entity;
				
				int size = inv.getSizeInventory();
				
				for(int i = 0; i < size; i++) {
					//System.out.println("Adding cobblestone to inventory.");
					
					if(inv.getStackInSlot(i) == null) {
						inv.setInventorySlotContents(i, new ItemStack(Blocks.cobblestone, 1));
						break;
					} else if(inv.getInventoryStackLimit() > inv.getStackInSlot(i).stackSize) {
						inv.getStackInSlot(i).stackSize += 1;
						break;
					}
				}
			}
			
			
		}
	}

	private ArrayList<Block> createBlockList(World world, ArrayList<EIPosition> position) {
		
		ArrayList<Block> temp = new ArrayList<Block>();
		
		for(int i = 0; i < position.size(); i++) {
			temp.add(world.getBlock(position.get(i).getX(), position.get(i).getY(), position.get(i).getZ()));
		}
		
		return temp;
	}
	
	private ArrayList<EIPosition> createPositionList(int x, int y, int z) {
		ArrayList<EIPosition> temp = new ArrayList<EIPosition>();
		
		temp.add(new EIPosition(x-1, y, z)); // Fire Iron Block
		temp.add(new EIPosition(x+1, y, z)); // Water Iron Block
		temp.add(new EIPosition(x-1, y, z-1));
		temp.add(new EIPosition(x-1, y, z+1));
		temp.add(new EIPosition(x-2, y, z));
		temp.add(new EIPosition(x-2, y, z-1));
		temp.add(new EIPosition(x-2, y, z+1));
		temp.add(new EIPosition(x+1, y, z-1));
		temp.add(new EIPosition(x+1, y, z+1));
		temp.add(new EIPosition(x+2, y, z));
		temp.add(new EIPosition(x+2, y, z-1));
		temp.add(new EIPosition(x+2, y, z+1));
		temp.add(new EIPosition(x, y, z-1));
		temp.add(new EIPosition(x, y, z+1));
		
		return temp;
	}
	
	private void printBlocks(ArrayList<Block> temp) {
		if(!testBlocks) {
			for(int i = 0; i < temp.size(); i++) {
				System.out.println("Unlocalizaed Name: " + temp.get(i).getUnlocalizedName());
			}
			
			testBlocks = true;
		}
	}
	
	private boolean checkForVoidStone(ArrayList<Block> temp) {
		boolean b = true;
		
		for(int i = 2; i < temp.size(); i++) {
			if(!EIBlocks.isVoidStone(temp.get(i))){
				
				if(!EIBlocks.isVoidStoneItemOutput(temp.get(i))) {
					b = false;
					break;
				}
			}
		}
		
		return b;
	}
	
	private boolean checkForVoidStoneOutput(ArrayList<Block> temp) {
		boolean b = false;
		
		for(int i = 2; i < temp.size(); i++) {
				
			if(EIBlocks.isVoidStoneItemOutput(temp.get(i))) {
				b = true;
				break;
			}
		}
		
		return b;
	}
	
	private boolean checkIfOneVoidStoneOutput(ArrayList<Block> temp) {
		int num = 0;
		
		
		for(int i = 2; i < temp.size(); i++) {
			if(EIBlocks.isVoidStoneItemOutput(temp.get(i))) {
				num += 1;
			}
		}
		
		return num == 1;
	}
	
	public void setOutputLocationBlock(ArrayList<EIPosition> p, ArrayList<Block> b) {
		for(int i = 2; i < p.size(); i++) {
			if(EIBlocks.isVoidStoneItemOutput(b.get(i))) {
				this.voidStoneOutput = b.get(i);
				this.voidStoneOutputPos = p.get(i);
				break;
			}
		}
	}
	
	private boolean isMultiBlockComplete(World world, int x, int y, int z) {
		ArrayList<EIPosition> posList = this.createPositionList(x, y, z);
		ArrayList<Block> blockList = this.createBlockList(world, posList);
		
		boolean b = true;
		
		printBlocks(blockList);
		
		if(!EIBlocks.isFireIronBlock(blockList.get(0))) {
			b = false;
		}
		
		if(!EIBlocks.isWaterIronBlock(blockList.get(1))) {
			b = false;
		}
		
		if(b) {
			b = checkForVoidStone(blockList);
		}
		
		if(b) {
			b = checkForVoidStoneOutput(blockList);
		}
		
		if(b) {
			b = checkIfOneVoidStoneOutput(blockList);
		}
		
		if(b) {
			this.setOutputLocationBlock(posList, blockList);
		}
		
		return b;
	}

}
